pipeline {
    agent any
    
    tools {
        jdk "jdk17"
        maven "maven3"
    }
    
    environment{
        GIT_REPO = 'https://github.com/Khaled1771/TheUltimate-CI-CD.git'
        BRANCH = 'dev'
        
        IMAGE_NAME = 'osamaseyam/boardgame-app'
        IMAGE_TAG = 'latest'
        SCANNER_HOME = tool 'sonar-scanner'
    }
    
    stages {
        stage('Git Checkout') {
            steps {
                git branch: "${BRANCH}", credentialsId: 'git-cred', url: "${GIT_REPO}"
            }
        }
        
        stage('Compile') {
            steps {
                script {
                    sh "cd BoardGame"
                    sh 'mvn compile'
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    sh "cd BoardGame"   
                    sh 'mvn test'
                }     
            }
        }
        
        stage('File System Scan') {
            steps {
                sh 'trivy fs --format table -o trivy-fs-report.html .'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh '''
                       $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=BoardGame-dev -Dsonar.projectKey=BoardGame-dev \
                       -Dsonar.java.binaries=. 
                    '''
                }
            }
        }
            
        stage('Quality Gate') {
            steps {
                script{
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-cred'
                }
            }
        }
        
        stage('Build'){
            steps{
                script {
                    sh "cd BoardGame"
                    sh 'mvn package'
                }
            }
        }
        
        stage('Publish To nexus'){
            steps{
                script {
                    sh "cd BoardGame"
                    withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                        sh 'mvn deploy'
                    }
                } 
            }
        }
        
        stage('Build & Tag Docker Image'){
            steps{
                script { 
                    sh "cd BoardGame"
                    withDockerRegistry(credentialsId: "docker-cred", toolName:'docker'){
                        sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."                        
                    }
                }
            }
        }
        
        stage('Docker Image Scan') {
            steps {
                sh 'trivy image --format table -o trivy-image-report.html osamaseyam/boardgame:lts'
            }
        }
        
        
        stage('Push Docker Image'){
            steps{
                script { 
                    withDockerRegistry(credentialsId: "docker-cred", toolName:'docker'){
                        sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }

         stage("Ansible With Docker") {
            steps{
                sh "ansible-playbook -i Ansible/inventory Ansible/docker.yml --extra-vars 'docker_image=${IMAGE_NAME} docker_tag=${IMAGE_TAG}'"
            }
        }
    }

    post {
        success {
            echo 'Pipeline execution was successful.'
        }

        failure {
            echo 'Pipeline execution failed. Check the logs for more information.'
        }

        always {
             sh 'docker logout'

            scirpt{
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: "UNKNOWN"
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'
                
                def body = """
                    <html>
                        <body>
                            <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                                <h2> ${jobName} - Build ${buildNumber} </h2>
                                <div style="background-color: ${bannerColor}; padding: 10px">
                                    <h3 style="color: white;"> Pipeline Status: ${pipelineStatus.toUpperCase()} </h3>
                                </div>
                                <p> Check the <a href="${BUILD_URL}"> console output. </a></p>
                            </div>
                        </body>
                    </html>
                """
                
                
                emailext(
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'osamamostafa065@gamil.com, abdelrahman.hamouda29@gmail.com',
                    from: "jenkins-BoardGame-CD-pipline@gmail.com",
                    replyTo: "jenkins-BoardGame-CD-pipline@gmail.com",
                    mimeType: 'text/html',
                    attachmentsPattern: 'trivy-image-report.html , trivy-fs-report.html'
                )
            }
        }
    }
}