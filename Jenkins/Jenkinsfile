pipeline {
    agent any
    
    tools {
        jdk "jdk17"
        maven "maven3"
    }
    
    environment{
        GIT_REPO = 'https://github.com/Khaled1771/TheUltimate-CI-CD.git'
        BRANCH = 'dev'
        
        IMAGE_NAME = 'osamaseyam/board-game'
        IMAGE_TAG = "${BUILD_NUMBER}"  // Using build number instead of 'latest'
        
        // Feature flags for local testing - set to false to skip stages
        PUSH_TO_NEXUS = 'false'
        PUSH_TO_DOCKER = 'false'
    }
    
    stages {
        stage('Git Checkout') {
            steps {
                checkout scm  // Using checkout scm instead of git step
            }
        }
        
        stage('Compile') {
            steps {
                script {
                    try {
                        dir('BoardGame') {
                            sh 'mvn compile -Dmaven.test.skip=true'
                        }
                    } catch(Exception e) {
                        error "Compilation failed: ${e.message}"
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    try {
                        dir('BoardGame') {
                            sh 'mvn test'
                        }
                    } catch(Exception e) {
                        error "Tests failed: ${e.message}"
                    }
                }     
            }
        }
        
        stage('File System Scan') {
            steps {
                script {
                    try {
                        sh 'trivy fs --format json -o trivy-fs-report.json --exit-code 0 --severity HIGH,CRITICAL .'
                    } catch(Exception e) {
                        echo "Warning: Trivy scan found issues, but continuing pipeline: ${e.message}"
                    }
                }
            }
        }
        
        stage('Build'){
            steps{
                script {
                    try {
                        dir('BoardGame') {
                            sh 'mvn package'
                        }
                    } catch(Exception e) {
                        error "Build failed: ${e.message}"
                    }
                }
            }
        }

        stage('Publish To Nexus') {
            when {
                environment name: 'PUSH_TO_NEXUS', value: 'true'
            }
            steps {
                retry(3) {
                    script {
                        withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                            dir('BoardGame') {
                                sh 'mvn deploy'
                            }
                        }
                    }
                }
            }
        }
        
        stage('Build & Tag Docker Image'){
            steps{
                script { 
                    try {
                        withDockerRegistry(credentialsId: "docker-cred", toolName:'docker'){
                            dir('BoardGame') {
                                sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."                        
                            }
                        }
                    } catch(Exception e) {
                        error "Docker build failed: ${e.message}"
                    }
                }
            }
        }
        
        stage('Docker Image Scan') {
            steps {
                script {
                    try {
                        sh "trivy image --format json -o trivy-image-report.json --exit-code 0 --severity HIGH,CRITICAL ${IMAGE_NAME}:${IMAGE_TAG}"
                    } catch(Exception e) {
                        echo "Warning: Trivy scan found issues, but continuing pipeline: ${e.message}"
                    }
                }
            }
        }
        
        stage('Push Docker Image'){
            when {
                environment name: 'PUSH_TO_DOCKER', value: 'true'
            }
            steps{
                script { 
                    try {
                        withDockerRegistry(credentialsId: "docker-cred", toolName:'docker'){
                            sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                        }
                    } catch(Exception e) {
                        error "Failed to push Docker image: ${e.message}"
                        retry(2) {
                            withDockerRegistry(credentialsId: "docker-cred", toolName:'docker'){
                                sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline execution was successful.'
        }

        failure {
            echo 'Pipeline execution failed. Check the logs for more information.'
        }

        always {
            script{
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: "UNKNOWN"
                
                echo "Pipeline '${jobName}' #${buildNumber} completed with status: ${pipelineStatus}"
                
                if (fileExists('trivy-fs-report.json')) {
                    echo "Trivy filesystem scan report is available"
                }
                
                if (fileExists('trivy-image-report.json')) {
                    echo "Trivy Docker image scan report is available"
                }
            }
        }
    }
}
